package com.example.demo.util;nnimport io.jsonwebtoken.Claims;nimport io.jsonwebtoken.Jwts;nimport io.jsonwebtoken.SignatureAlgorithm;nimport io.jsonwebtoken.security.Keys;nimport org.springframework.beans.factory.annotation.Value;nimport org.springframework.stereotype.Component;nnimport javax.crypto.SecretKey;nimport java.util.Date;nimport java.util.HashMap;nimport java.util.Map;nimport java.util.function.Function;nn@Componentnpublic class JwtUtil {n    n    @Value("${jwt.secret}")n    private String secret;n    n    @Value("${jwt.expiration}")n    private Long expiration;n    n    private SecretKey getSigningKey() {n        return Keys.hmacShaKeyFor(secret.getBytes());n    }n    n    public String generateToken(String username) {n        Map<String, Object> claims = new HashMap<>();n        return createToken(claims, username);n    }n    n    private String createToken(Map<String, Object> claims, String subject) {n        return Jwts.builder()n                .setClaims(claims)n                .setSubject(subject)n                .setIssuedAt(new Date(System.currentTimeMillis()))n                .setExpiration(new Date(System.currentTimeMillis() + expiration))n                .signWith(getSigningKey(), SignatureAlgorithm.HS256)n                .compact();n    }n    n    public Boolean validateToken(String token, String username) {n        final String tokenUsername = extractUsername(token);n        return (username.equals(tokenUsername) && !isTokenExpired(token));n    }n    n    public String extractUsername(String token) {n        return extractClaim(token, Claims::getSubject);n    }n    n    public Date extractExpiration(String token) {n        return extractClaim(token, Claims::getExpiration);n    }n    n    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {n        final Claims claims = extractAllClaims(token);n        return claimsResolver.apply(claims);n    }n    n    private Claims extractAllClaims(String token) {n        return Jwts.parserBuilder()n                .setSigningKey(getSigningKey())n                .build()n                .parseClaimsJws(token)n                .getBody();n    }n    n    private Boolean isTokenExpired(String token) {n        return extractExpiration(token).before(new Date());n    }n}