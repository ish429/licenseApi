#!/bin/shnn#n# Copyright © 2015-2021 the original authors.n#n# Licensed under the Apache License, Version 2.0 (the "License");n# you may not use this file except in compliance with the License.n# You may obtain a copy of the License atn#n#      https://www.apache.org/licenses/LICENSE-2.0n#n# Unless required by applicable law or agreed to in writing, softwaren# distributed under the License is distributed on an "AS IS" BASIS,n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.n# See the License for the specific language governing permissions andn# limitations under the License.n#nn##############################################################################n#n#   Gradle start up script for POSIX generated by Gradle.n#n#   Important for running:n#n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh isn#       noncompliant, but you have some other compliant shell such as ksh orn#       bash, then to run this script, type that shell name before the wholen#       command line, like:nn#           ksh Gradlenn#       Busybox and similar reduced shells will NOT work, because this scriptn#       requires all of these POSIX shell features:n#         * functions;n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,n#           «${var#pattern}», «${var%pattern}», «${var##pattern}», «${var%%pattern}»;n#         * compound commands having a testable exit status, especially «case»;n#         * various built-in commands including «command», «set», and «ulimit».n#n#   Important for patching:n#n#   (2) This script targets any POSIX shell, so it avoids extensions providedn#       by Bash, Ksh, etc; in particular arrays are avoided.n#n#       The "traditional" practice of packing multiple parameters into an#       space-separated string is a well documented source of bugs and securityn#       problems, so this is (mostly) avoided, by progressively accumulatingn#       options in "$@", and eventually passing that to Java.n#n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;n#       see the in-line comments for details.n#n#       There are tweaks for specific operating systems such as AIX, CygWin,n#       Darwin, MinGW, and NonStop.n#n#   (3) This script is generated from the Gradle template within the Gradle project.n#n#       You can find Gradle at https://github.com/gradle/gradle/.n#n##############################################################################nn# Attempt to set APP_HOMEn# Resolve links: $0 may be a linknapp_path=$0nn# Need this for daisy-chained symlinks.nwhilen    APP_HOME=${app_path%/*} && [ -d "$APP_HOME" ]n    don        app_path=${app_path%/*}n    donenAPP_HOME=$(cd "$APP_HOME" && pwd -P)nn# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.nDEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'"nn# Use the maximum available, or set MAX_FD != -1 to use that value.nMAX_FD=maximumnnwarn () {n    echo "$*"n} >&2nndie () {n    echon    echo "$*"n    echon    exit 1n} >&2nn# OS specific support (must be 'true' or 'false').ncygwin=falsenmsys=falsendarwin=falsennonstop=falsencase "$(uname)" inn  CYGWIN* )n    cygwin=truen    ;;n  Darwin* )n    darwin=truen    ;;n  MINGW* )n    msys=truen    ;;n  NONSTOP* )n    nonstop=truen    ;;nesacnnCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jarnnn# Determine the Java command to use to start the JVM.nif [ -n "$JAVA_HOME" ] ; thenn    if [ -x "$JAVA_HOME/jre/sh/java" ] ; thenn        # IBM's JDK on AIX uses strange locations for the executablesn        JAVACMD="$JAVA_HOME/jre/sh/java"n    elsen        JAVACMD="$JAVA_HOME/bin/java"n    fin    if [ ! -x "$JAVACMD" ] ; thenn        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOMEnnPlease set the JAVA_HOME variable in your environment to match thenlocation of your Java installation."n    finelsen    JAVACMD="java"n    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.nnPlease set the JAVA_HOME variable in your environment to match thenlocation of your Java installation."nfinn# Increase the maximum file descriptors if we can.nif ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; thenn    case $MAX_FD in #(n      max*)n        MAX_FD=$( ulimit -H -n ) ||n            warn "Could not query maximum file descriptor limit"n    esacn    case $MAX_FD in #(n      ?* )n        MAX_FD=0n        ;;n      * )n        warn "Could not query maximum file descriptor limit"n        ;;n    esacnfinnif [ $MAX_FD -ne -1 ]; thenn    if ! ulimit -n "$MAX_FD" ; thenn        warn "Could not set maximum file descriptor limit to $MAX_FD"n    finfinn# Escape application argsnsave () {n    for i do printf %s\n "$i" | sed "s/'/'\\\''/g;1s/^/'/;\$s/\$/'/" ; donen}nn# Collect all arguments for the java command, stacking in reverse order:n#   * args from the command linen#   * the main class namen#   * -classpathn#   * -D...appname settingsn#   * --module-path (only if needed)n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.nn# For Cygwin or MSYS, switch paths to Windows format before running javanif "$cygwin" || "$msys" ; thenn    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )n    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )nn    JAVACMD=$( cygpath --unix "$JAVACMD" )nn    # Now convert the arguments - kludge to limit ourselves to /bin/shn    i=0n    for arg in "$@" ; don        arg=$( cygpath --path --ignore --mixed "$arg" )n        if [ -n "$arg" ] ; thenn            eval set -- "$@" "$arg"n            i=$((i+1))n        fin    donen    eval set -- "$@"n    i=0n    for arg in "$@" ; don        arg=$( cygpath --path --ignore --mixed "$arg" )n        if [ -n "$arg" ] ; thenn            eval set -- "$@" "$arg"n            i=$((i+1))n        fin    donen    eval set -- "$@"nfinn# Collect all arguments for the java command:n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.n#   * command line argumentsn#   * the main class namen#   * -classpathn#   * -D...appname settingsn#   * --module-path (only if needed)nnset -- \n        "-Dorg.gradle.appname=$APP_BASE_NAME" \n        -classpath "$CLASSPATH" \n        org.gradle.wrapper.GradleWrapperMain \n        "$@"nn# Stop when "xargs" is not available.nif ! command -v xargs >/dev/null 2>&1n    thenn    die "xargs is not available"nfinn# Use "xargs" to parse quoted args.n#n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.n#n# In Bash we could simply go:n#n#   readarray ARGS < <( xargs -n1 <<<"$*" )n#n# but POSIX shell has neither arrays nor command substitution, so instead wen# post-process each arg (as a line of input to sed) to backslash-escape anyn# character that might be a shell metacharacter, then use eval to reversen# that process (while maintaining the separation between arguments).n#n# This will of course break if any of these variables contains a newline orn# an unmatched quote.n#nneval set -- $( printf '%s\n' "$*" | xargs -n1 printf '%q ' )nnexec "$JAVACMD" "$@"